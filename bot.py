import logging
import random
import string
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# ржЖржкржирж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржПржмржВ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ ржжрж┐ржи
TOKEN = "8495166192:AAF4equQDsT9iCWS2IQ-x63il9IHbEi4XpY"
CHANNEL_ID_ONE = -1002632355234
CHANNEL_ID_TWO = -1002323042564

# Logging рж╕рзЗржЯржЖржк
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ржкрзНрж░рждрж┐ржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕржмрж╕рзНржерж╛ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржбрж┐ржХрж╢ржирж╛рж░рж┐
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рж╕рзНржЯрж╛рж░рзНржЯ (/start) ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗред"""
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name if update.effective_user.first_name else "ржмржирзНржзрзБ"

    user_states[user_id] = {"step": "waiting_for_uid"}
    
    start_message = (
        f"**ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо, {first_name} ржнрж╛ржЗ!**\n\n"
        f"ржЖржорж╛ржжрзЗрж░ ржмржЯржЯрж┐рждрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред ржЖржорж╛ржжрзЗрж░ ржмрж┐рж╢рзЗрж╖ **DK WIN рж╣рзНржпрж╛ржХржЯрж┐** ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж┐ ржЧрзЗржо ржерзЗржХрзЗ ржЕржирзЗржХ ржмрзЗрж╢рж┐ ржЗржиржХрж╛ржо ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржПржмржВ ржЦрзБржм рж╕рж╣ржЬрзЗржЗ ржЖржкржирж╛рж░ рж╕рзНржмржкрзНржирзЗрж░ рж▓ржХрзНрж╖рзНржп ржкрзВрж░ржг ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ржЖржорж╛ржжрзЗрж░ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЦрзБржмржЗ рж╕рж╣ржЬред\n\n"
        f"рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ **DK WIN ржЧрзЗржорзЗрж░ ржЗржЙржЖржЗржбрж┐ (UID)** ржЯрж┐ ржкрж╛ржарж╛ржиред\n\n"
        f"тЪая╕П **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг:** ржЖржкржирж╛рж░ ржЗржЙржЖржЗржбрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржпрж╝рзЗ ржЧржарж┐ржд рж╣рждрзЗ рж╣ржмрзЗред ржЕржирзНржп ржХрзЛржирзЛ ржЕржХрзНрж╖рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред"
    )
    await update.message.reply_text(start_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗред"""
    user = update.effective_user
    user_id = user.id
    
    current_state = user_states.get(user_id, {})
    current_step = current_state.get("step")

    if current_step == "waiting_for_uid":
        user_uid = update.message.text
        
        # ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛ ржпрзЗ UID рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржпрж╝рзЗ ржЧржарж┐ржд
        if not user_uid.isdigit():
            await update.message.reply_text("ржжрзБржГржЦрж┐ржд! ржЖржкржирж╛рж░ ржЗржЙржЖржЗржбрж┐ржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржпрж╝рзЗ ржЧржарж┐ржд рж╣рждрзЗ рж╣ржмрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржЗржЙржЖржЗржбрж┐ржЯрж┐ ржЖржмрж╛рж░ ржкрж╛ржарж╛ржиред")
            return
        
        user_states[user_id]["uid"] = user_uid
        user_states[user_id]["step"] = "waiting_for_username"

        username_prompt = (
            "тЬЕ **рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржкржбрж╝рзЗржЫрзЗ!** тЬЕ\n\n"
            "ржПржЦржи ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╣рзНржпрж╛ржХрзЗрж░ ржнрж┐рждрж░ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзБржиред рж╕рзЗржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржпрзЗ **ржЗржЙржЬрж╛рж░ржирзЗржоржЯрж┐** ржжрзЗржЦрждрзЗ ржкрж╛ржмрзЗржи, рж╕рзЗржЯрж┐ ржЖржорж╛ржжрзЗрж░ржХрзЗ ржкрж╛ржарж╛ржиред"
        )
        await update.message.reply_text(username_prompt)
        
    elif current_step == "waiting_for_username":
        user_input_username = update.message.text
        
        user_states[user_id]["game_username"] = user_input_username
        
        # ржПржХржЯрж┐ рж░рзНржпрж╛ржирзНржбржо ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ ржХрж┐ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        random_key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
        user_uid = user_states[user_id]["uid"]
        
        response_message = (
            f"тЬЕ **ржЖржкржирж╛рж░ ржЖржмрзЗржжржиржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржкржбрж╝рзЗржЫрзЗ!** тЬЕ\n\n"
            f"ржЖржкржирж╛рж░ ржЖржмрзЗржжржиржЯрж┐ ржПржЦржи ржЖржорж╛ржжрзЗрж░ ржЯрзЗрж╕рзНржЯрж┐ржВ ржЯрж┐ржорзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред ржХрж┐ржЫрзБржХрзНрж╖ржгрзЗрж░ ржоржзрзНржпрзЗржЗ ржЖржкржирж╛ржХрзЗ ржЕрзНржпрж╛ржкрзНрж░рзБржн ржжрзЗржпрж╝рж╛ рж╣ржмрзЗ ржПржмржВ ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╣рзНржпрж╛ржХржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
        )
        
        # ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ ржХрж┐ ржПрж░ ржЬржирзНржп ржХржкрж┐ ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рж╛
        key_button = [[InlineKeyboardButton(text=f"ржХржкрж┐ ржХрж░рждрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи: {random_key}", url=f"https://t.me/share/url?url={random_key}")]]
        key_markup = InlineKeyboardMarkup(key_button)

        await update.message.reply_text(response_message, reply_markup=key_markup)

        # ржХржиржлрж╛рж░рзНржо ржПржмржВ рж░рж┐ржЬрзЗржХрзНржЯ ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рж╛
        keyboard = [
            [
                InlineKeyboardButton("ржХржиржлрж╛рж░рзНржо", callback_data=f"CONFIRM_{user_id}_{random_key}"),
                InlineKeyboardButton("рж░рж┐ржЬрзЗржХрзНржЯ", callback_data=f"REJECT_{user_id}_{random_key}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ (ржЪрзНржпрж╛ржирзЗрж▓ рзз) рждржерзНржп ржПржмржВ ржмрж╛ржЯржи ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        bot = Bot(TOKEN)
        message_to_channel_one = (
            f"**ржирждрзБржи ржЗржЙржЬрж╛рж░:**\n"
            f"ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: `{user_id}`\n"
            f"ржЗржЙржЬрж╛рж░ржирзЗржо: @{user.username if user.username else 'N/A'}\n"
            f"ржЗржЙржЖржЗржбрж┐: `{user_uid}`\n"
            f"ржЧрзЗржо ржЗржЙржЬрж╛рж░ржирзЗржо: `{user_input_username}`\n"
            f"ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ ржХрж┐: `{random_key}`"
        )
        
        await bot.send_message(
            chat_id=CHANNEL_ID_ONE, 
            text=message_to_channel_one, 
            reply_markup=reply_markup
        )

        # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕржмрж╕рзНржерж╛ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
        del user_states[user_id]
        
    else:
        await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ /start ржХржорж╛ржирзНржбржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗред"""
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action = data[0]
    
    if action == "CONFIRM":
        user_id = data[1]
        key = data[2]
        
        # ржорзВрж▓ ржорзЗрж╕рзЗржЬ ржерзЗржХрзЗ рж╕ржорзНржкрзВрж░рзНржг рждржерзНржп ржмрзЗрж░ ржХрж░рж╛
        original_message_text = query.message.text
        
        # ржХржиржлрж╛рж░рзНржо ржмрж╛ржЯржи ржЪрж╛ржкрж▓рзЗ ржжрзНржмрж┐рждрзАржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржПржХржЯрж┐ ржирждрзБржи ржХржиржлрж╛рж░рзНржо ржмрж╛ржЯржи рж╕рж╣ рж╕ржорзНржкрзВрж░рзНржг рждржерзНржп ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        bot = Bot(TOKEN)
        
        keyboard_two = [[InlineKeyboardButton("ржЪрзВржбрж╝рж╛ржирзНржд ржХржиржлрж╛рж░рзНржо", callback_data=f"FINAL_CONFIRM_{user_id}_{key}")]]
        reply_markup_two = InlineKeyboardMarkup(keyboard_two)
        
        await bot.send_message(
            chat_id=CHANNEL_ID_TWO, 
            text=original_message_text,
            reply_markup=reply_markup_two
        )
        
        # ржкрзНрж░ржержо ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        await query.edit_message_text(text=f"тЬЕ ржПржЗ ржЕржирзБрж░рзЛржзржЯрж┐ ржХржиржлрж╛рж░рзНржо ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЪрзВржбрж╝рж╛ржирзНржд ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓рзЗрж░ ржЬржирзНржп ржжрзНржмрж┐рждрзАржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")

    elif action == "REJECT":
        # рж░рж┐ржЬрзЗржХрзНржЯ ржмрж╛ржЯржи ржЪрж╛ржкрж▓рзЗ ржкрзНрж░ржержо ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        await query.edit_message_text(text=f"тЭМ ржПржЗ ржЕржирзБрж░рзЛржзржЯрж┐ рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    elif action == "FINAL_CONFIRM":
        user_id = data[1]
        key = data[2]
        
        # ржжрзНржмрж┐рждрзАржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЪрзВржбрж╝рж╛ржирзНржд ржХржиржлрж╛рж░рзНржо ржмрж╛ржЯржи ржЪрж╛ржкрж▓рзЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        bot = Bot(TOKEN)
        
        # ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        notification_message = (
            f"ЁЯОЙ **ржЕржнрж┐ржиржирзНржжржи!** ЁЯОЙ\n\n"
            f"ржЖржкржирж╛рж░ рж╣рзНржпрж╛ржХржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕрзНржпрж╛ржкрзНрж░рзБржн рж╣ржпрж╝рзЗржЫрзЗред ржПржЦржи ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╣рзНржпрж╛ржХржЯрж┐ рж▓ржЧржЗржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n"
            f"ржЖржкржирж╛рж░ рж╕рж┐ржХрзНрж░рзЗржЯ ржХрж┐: `{key}`\n\n"
            f"ржПржЗ ржХрж┐ ржжрж┐ржпрж╝рзЗ ржЖржкржирж╛рж░ рж╣рзНржпрж╛ржХржЯрж┐ рж▓ржЧржЗржи ржХрж░рзБржиред"
        )
        # ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ ржХрж┐ ржПрж░ ржЬржирзНржп ржХржкрж┐ ржмрж╛ржЯржи ржпрзЛржЧ ржХрж░рж╛
        copy_button = [[InlineKeyboardButton(text=f"ржХржкрж┐ ржХрж░рждрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи: {key}", url=f"https://t.me/share/url?url={key}")]]
        copy_markup = InlineKeyboardMarkup(copy_button)
        
        await bot.send_message(chat_id=user_id, text=notification_message, reply_markup=copy_markup)
        
        # ржжрзНржмрж┐рждрзАржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        await query.edit_message_text(text=f"тЬЕ ржПржЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

def main() -> None:
    """ржмржЯ рж╢рзБрж░рзБ ржХрж░рзЗред"""
    application = Application.builder().token(TOKEN).build()

    # ржХржорж╛ржирзНржб ржПржмржВ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    # ржмржЯ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рж╛
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()